.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "TIFFFIELDQUERY" "3tiff" "Sep 08, 2023" "4.6" "LibTIFF"
.SH NAME
TIFFFieldQuery \- routines to query TIFF field information
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <tiffio.h>
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B const  TIFFField  *TIFFFieldWithName(TIFF  *tif, const  char  *field_name) 
.UNINDENT
.INDENT 0.0
.TP
.B const  TIFFField  *TIFFFieldWithTag(TIFF  *tif, uint32_t  tag) 
.UNINDENT
.INDENT 0.0
.TP
.B const  TIFFField  *TIFFFindField(TIFF  *tif, uint32_t  tag, TIFFDataType  dt) 
.UNINDENT
.INDENT 0.0
.TP
.B int  TIFFFieldIsAnonymous(const  TIFFField  *fip) 
.UNINDENT
.INDENT 0.0
.TP
.B int  TIFFFieldSetGetSize(const  TIFFField  *fip) 
.UNINDENT
.INDENT 0.0
.TP
.B int  TIFFFieldSetGetCountSize(const  TIFFField  *fip) 
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%TIFFFieldWithName()\fP and \fI\%TIFFFieldWithTag()\fP
return a pointer to TIFF field information structure \fIfip\fP by the tag’s
\fIfield_name\fP or its \fItag\fP number.
.sp
\fI\%TIFFFindField()\fP searches for the TIFF field information structure
\fIfip\fP of a given \fItag\fP number and a specific \fITIFFDataType dt\fP\&.
With dt== \fBTIFF_ANY\fP the behaviour is the same than for
\fITIFFFieldWithTag()\fP\&.
.sp
All three functions return \fBNULL\fP, when the tag is not
registered within \fBlibtiff\fP (see also \fI\%Default Tag Auto\-registration\fP ).
.INDENT 0.0
.INDENT 3.5
Such a \fITIFFDataType\fP dependent search could be useful when the same
tag is defined twice but with different data types, which is true for
rare cases like TIFFTAG_XCLIPPATHUNITS. However, the \fBlibtiff\fP does
currently not support multiple definitions of the same tag.
.UNINDENT
.UNINDENT
.sp
The following routines return status information about TIFF fields.
.sp
\fBfip\fP is a field information pointer previously returned by
\fITIFFFindField()\fP, \fITIFFFieldWithTag()\fP, \fITIFFFieldWithName()\fP\&.
.sp
\fI\%TIFFFieldIsAnonymous()\fP returns true (nonzero) if the field,
read from file, is unknown to \fBlibtiff\fP and an anonymous field has
been auto\-registered. Return is zero “0” if field is known to \fBlibtiff\fP\&.
See  \fI\%Default Tag Auto\-registration\fP   for more information.
.sp
\fI\%TIFFFieldSetGetSize()\fP returns the data size in bytes of
the field data type used for \fBlibtiff\fP internal storage.
This is also the data size of the parameter to be provided to
\fI\%TIFFSetField()\fP and \fI\%TIFFGetField()\fP\&. Custom
\fBTIFF_RATIONAL\fP values can be stored internally either
as \fBfloat\fP or \fBdouble\fP\&. \fI\%TIFFFieldSetGetSize()\fP would
then return “4” or “8”, respectively.
.sp
\fI\%TIFFFieldSetGetCountSize()\fP returns size of \fBcount\fP parameter
of \fI\%TIFFSetField()\fP and \fI\%TIFFGetField()\fP and also if it is
required:  0=none, 2= \fBuint16_t\fP, 4= \fBuint32_t\fP\&.
See also description of \fI\%TIFFFieldReadCount()\fP\&.
.SH DIAGNOSTICS
.sp
None.
.SH SEE ALSO
.sp
\fI\%TIFFFieldDataType\fP (3tiff),
\fI\%TIFFFieldName\fP (3tiff),
\fI\%TIFFFieldPassCount\fP (3tiff),
\fI\%TIFFFieldReadCount\fP (3tiff),
\fI\%TIFFFieldTag\fP (3tiff),
\fI\%TIFFFieldWriteCount\fP (3tiff),
\fI\%libtiff\fP (3tiff)
.SH AUTHOR
LibTIFF contributors
.SH COPYRIGHT
1988-2022, LibTIFF contributors
.\" Generated by docutils manpage writer.
.
