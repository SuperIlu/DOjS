.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "TIFFRGBAIMAGE" "3tiff" "Sep 08, 2023" "4.6" "LibTIFF"
.SH NAME
TIFFRGBAImage \- read and decode an image into a raster
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <tiffio.h>
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B typedef  unsigned  char  TIFFRGBValue 
.UNINDENT
.INDENT 0.0
.TP
.B typedef  struct  _TIFFRGBAImage  TIFFRGBAImage 
.UNINDENT
.INDENT 0.0
.TP
.B int  TIFFRGBAImageOK(TIFF  *tif, char  emsg[1024]) 
.UNINDENT
.INDENT 0.0
.TP
.B int  TIFFRGBAImageBegin(\fI\%TIFFRGBAImage\fP  *img, TIFF  *tif, int  stopOnError, char  emsg[1024]) 
.UNINDENT
.INDENT 0.0
.TP
.B int  TIFFRGBAImageGet(\fI\%TIFFRGBAImage\fP  *img, uint32_t  *raster, uint32_t  width, uint32_t  height) 
.UNINDENT
.INDENT 0.0
.TP
.B void  TIFFRGBAImageEnd(\fI\%TIFFRGBAImage\fP  *img) 
.UNINDENT
.SH DESCRIPTION
.sp
The routines described here provide a high\-level interface through which
TIFF images may be read into memory.
Images may be strip\- or tile\-based and have a variety of different
characteristics: bits/sample, samples/pixel, photometric, etc.
Decoding state is encapsulated in a \fI\%TIFFRGBAImage\fP
structure making it possible to capture state for multiple images
and quickly switch between them.
The target raster format can be customized to a particular application’s
needs by installing custom routines that manipulate image data
according to application requirements.
.sp
The default usage for these routines is:
.INDENT 0.0
.IP \(bu 2
check if an image can be processed using \fI\%TIFFRGBAImageOK()\fP
.IP \(bu 2
construct a decoder state block using \fI\%TIFFRGBAImageBegin()\fP
.IP \(bu 2
read and decode an image into a target raster using
\fI\%TIFFRGBAImageGet()\fP, and then
.IP \(bu 2
release resources using \fI\%TIFFRGBAImageEnd()\fP
.UNINDENT
.sp
\fI\%TIFFRGBAImageGet()\fP can be called multiple times to decode an
image using different state parameters.
If multiple images are to be displayed and there is not enough
space for each of the decoded rasters, multiple state blocks can
be managed and then calls can be made to \fI\%TIFFRGBAImageGet()\fP
as needed to display an image.
.sp
The generated raster is assumed to be an array of
\fIwidth\fP × \fIheight\fP
32\-bit entries, where \fIwidth\fP must be less than or equal to the width of
the image (\fIheight\fP may be any non\-zero size).
If the raster dimensions are smaller than the image, the image data
is cropped to the raster bounds.
If the raster height is greater than that of the image, then the
image data are placed in the lower part of the raster.
(Note that the raster is assume to be organized such that the pixel
at location (\fIx\fP, \fIy\fP) is \fIraster\fP [ \fIy\fP × \fIwidth\fP + \fIx\fP ];
with the raster origin in the \fIlower\-left hand corner\fP\&.)
.sp
Raster pixels are 8\-bit packed red, green, blue, alpha samples.
The macros \fI\%TIFFGetR\fP, \fI\%TIFFGetG\fP, \fI\%TIFFGetB\fP,
and \fI\%TIFFGetA\fP should be used to access individual samples.
Images without Associated Alpha matting information have a constant
Alpha of 1.0 (255).
.sp
\fI\%TIFFRGBAImageGet()\fP converts non\-8\-bit images by scaling sample
values.  Palette, grayscale, bilevel, CMYK, and YCbCr images are
converted to RGB transparently.
Raster pixels are returned uncorrected by any colorimetry information
present in the directory.
.sp
The parameter \fIstopOnError\fP specifies how to act if an error is
encountered while reading the image.  If \fIstopOnError\fP is non\-zero,
then an error will terminate the operation; otherwise
\fI\%TIFFRGBAImageGet()\fP will continue processing data until all the
possible data in the image have been requested.
.SH ALTERNATE RASTER FORMATS
.sp
To use the core support for reading and processing  TIFF images, but
write the resulting raster data in a different format one need only
override the “put methods” used to store raster data.
These methods are are defined in the \fI\%TIFFRGBAImage\fP
structure and initially setup by \fI\%TIFFRGBAImageBegin()\fP
to point to routines that pack raster data in the default
ABGR pixel format.
Two different routines are used according to the physical organization
of the image data in the file:
\fBPlanarConfiguration\fP = 1 (packed samples), and
\fBPlanarConfiguration\fP = 2 (separated samples).
Note that this mechanism can be used to transform the data before
storing it in the raster.
For example one can convert data to colormap indices for display on a
colormap display.
.SH SIMULTANEOUS RASTER STORE AND DISPLAY
.sp
It is simple to display an image as it is being read into memory
by overriding the put methods as described above for supporting
alternate raster formats.
Simply keep a reference to the default put methods setup by
\fI\%TIFFRGBAImageBegin()\fP and then invoke them before or after
each display operation.
An example for a “put” method to
update the display as the raster is being filled:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
static void
putContigAndDraw(TIFFRGBAImage* img, uint32_t* raster,
    uint32_t x, uint32_t y, uint32_t w, uint32_t h,
    int32_t fromskew, int32_t toskew,
    unsigned char* cp)
{
    (*putContig)(img, raster, x, y, w, h, fromskew, toskew, cp);
    if (x+w == width) {
        w = width;
        if (img\->orientation == ORIENTATION_TOPLEFT)
            lrectwrite(0, y\-(h\-1), w\-1, y, raster\-x\-(h\-1)*w);
        else
            lrectwrite(0, y, w\-1, y+h\-1, raster);
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
(the original routine provided by the library is saved in the
variable \fBputContig\fP\&.)
.SH SUPPORTING ADDITIONAL TIFF FORMATS
.sp
The \fI\%TIFFRGBAImage()\fP routines support the most commonly
encountered flavors of TIFF.  It is possible to extend this support by
overriding the “get method” invoked by \fI\%TIFFRGBAImageGet()\fP
to read TIFF image data.
Details of doing this are a bit involved, it is best to make a copy
of an existing get method and modify it to suit the needs of an
application.
.SH NOTES
.sp
Samples must be either 1, 2, 4, 8, or 16 bits.
Colorimetric samples/pixel must be either 1, 3, or 4 (i.e.
\fBSamplesPerPixel\fP \-\fBExtraSamples\fP).
.sp
Palette image colormaps that appear to be incorrectly written
as 8\-bit values are automatically scaled to 16\-bits.
.SH RETURN VALUES
.sp
All routines return 1 if the operation was successful.
Otherwise, 0 is returned if an error was encountered and
\fIstopOnError\fP is zero.
.SH DIAGNOSTICS
.sp
All error messages are directed to the \fI\%TIFFErrorExtR()\fP routine.
.sp
\fB\(dqSorry, can not handle %d\-bit pictures\(dq\fP:
.INDENT 0.0
.INDENT 3.5
The image had \fBBitsPerSample\fP other than 1, 2, 4, 8, or 16.
.UNINDENT
.UNINDENT
.sp
\fB\(dqSorry, can not handle %d\-channel images\(dq\fP:
.INDENT 0.0
.INDENT 3.5
The image had \fBSamplesPerPixel\fP other than 1, 3, or 4.
.UNINDENT
.UNINDENT
.sp
\fBMissing needed \(dqPhotometricInterpretation\(dq tag\fP:
.INDENT 0.0
.INDENT 3.5
The image did not have a tag that describes how to display
the data.
.UNINDENT
.UNINDENT
.sp
\fBNo \(dqPhotometricInterpretation\(dq tag, assuming RGB\fP:
.INDENT 0.0
.INDENT 3.5
The image was missing a tag that describes how to display it,
but because it has 3 or 4 samples/pixel, it is assumed to be
RGB.
.UNINDENT
.UNINDENT
.sp
\fBNo \(dqPhotometricInterpretation\(dq tag, assuming min\-is\-black\fP:
.INDENT 0.0
.INDENT 3.5
The image was missing a tag that describes how to display it,
but because it has 1 sample/pixel, it is assumed to be a grayscale
or bilevel image.
.UNINDENT
.UNINDENT
.sp
\fB\(dqNo space for photometric conversion table\(dq\fP:
.INDENT 0.0
.INDENT 3.5
There was insufficient memory for a table used to convert
image samples to 8\-bit RGB.
.UNINDENT
.UNINDENT
.sp
\fBMissing required \(dqColormap\(dq tag\fP:
.INDENT 0.0
.INDENT 3.5
A Palette image did not have a required \fBColormap\fP tag.
.UNINDENT
.UNINDENT
.sp
\fB\(dqNo space for tile buffer\(dq\fP:
.INDENT 0.0
.INDENT 3.5
There was insufficient memory to allocate an i/o buffer.
.UNINDENT
.UNINDENT
.sp
\fB\(dqNo space for strip buffer\(dq\fP:
.INDENT 0.0
.INDENT 3.5
There was insufficient memory to allocate an i/o buffer.
.UNINDENT
.UNINDENT
.sp
\fB\(dqCan not handle format\(dq\fP:
.INDENT 0.0
.INDENT 3.5
The image has a format (combination of \fBBitsPerSample\fP,
\fBSamplesPerPixel\fP and \fBPhotometricInterpretation\fP)
that can not be handled.
.UNINDENT
.UNINDENT
.sp
\fB\(dqNo space for B&W mapping table\(dq\fP:
.INDENT 0.0
.INDENT 3.5
There was insufficient memory to allocate a table used to map
grayscale data to RGB.
.UNINDENT
.UNINDENT
.sp
\fB\(dqNo space for Palette mapping table\(dq\fP:
.INDENT 0.0
.INDENT 3.5
There was insufficient memory to allocate a table used to map
data to 8\-bit RGB.
.UNINDENT
.UNINDENT
.SH SEE ALSO
.sp
\fI\%TIFFOpen\fP (3tiff),
\fI\%TIFFReadRGBAImage\fP (3tiff),
\fI\%TIFFReadRGBAStrip\fP (3tiff),
\fI\%TIFFReadRGBATile\fP (3tiff),
\fI\%libtiff\fP (3tiff)
.SH AUTHOR
LibTIFF contributors
.SH COPYRIGHT
1988-2022, LibTIFF contributors
.\" Generated by docutils manpage writer.
.
