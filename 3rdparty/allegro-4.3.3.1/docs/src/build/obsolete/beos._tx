@html_text_substitution=readme.txt|<a href="../readme.html">readme.txt</a>
@external-css=../allegro.css
@document_title=Allegro BeOS-specific information
@<pre>
     ______   ___    ___
    /\  _  \ /\_ \  /\_ \
    \ \ \L\ \\//\ \ \//\ \      __     __   _ __   ___ 
     \ \  __ \ \ \ \  \ \ \   /'__`\ /'_ `\/\`'__\/ __`\
      \ \ \/\ \ \_\ \_ \_\ \_/\  __//\ \L\ \ \ \//\ \L\ \
       \ \_\ \_\/\____\/\____\ \____\ \____ \ \_\\ \____/
	\/_/\/_/\/____/\/____/\/____/\/___L\ \/_/ \/___/
				       /\____/
				       \_/__/


		 BeOS-specific information.

	 See readme.txt for a more general overview.
@</pre>



@heading
BeOS notes

   Status: It compiles for Intel R4 & R5. Port is complete.



@heading
Required software

   BeOS Intel R4 and R5 Pro Edition come with everything you need. If you
   have BeOS Intel R5 Personal Edition, you require the development tools;
   these can be found on the Be homepage at <link>http://www.be.com</a>. You also need
   updated binutils, which can be found at <link>http://bebits.com</a>. It might not
   be a bad idea to update gcc as well, but is not required.



@heading
Installing Allegro

   Allegro comes as a source distribuition: you'll have to compile it to get
   it to work. Unzip the library archive wherever you want, and cd into that
   directory with a Terminal. Due to the multi-platform nature of Allegro,
   you need to run:
<textblock>
      fix.sh beos
<endblock>
   This will set the library ready to be compiled on the Be platform.
   Now you must build it:
<textblock>
      make
<endblock>
   And then install it:
<textblock>
      make install
<endblock>
   With this last command the Allegro library will be installed into
   <tt>/boot/home/config/lib</tt> (the default location for BeOS shared libraries),
   while the headers will go into <tt>/boot/develop/headers</tt> (the default
   locations where Be looks for them).
   
   You have now installed Allegro! See the rest of the documentation and
   examples to learn more about it. A simple example of a command line to
   compile an allegro program:
<textblock>
      gcc foo.c -O2 -Wall -o foo `allegro-config --shared`
<endblock>   
   The `<tt>allegro-config --shared</tt>` is explained in the next section.
        
   The dynamically linked version of Allegro gets built by default but if
   you want to build the statically linked version of Allegro write the
   following on the command line:
<textblock>
      export STATICLINK=1
<endblock>
   In the same manner we can also enter one of the following lines to
   build either the debug or the profiling version of the library:
<textblock>
      export DEBUGMODE=1
      export PROFILEMODE=1
<endblock>
   Then we can start to actually make and install the Allegro library.
<textblock>
      make
      make install
<endblock>
   If you have compiled a static version of the library, it will be copied to
   <tt>/boot/develop/lib/x86</tt>.
     


@heading
Using Allegro
   
   Linking Allegro to a program also requires you to link several other BeOS
   libraries and set the correct library search pathes. To simplify the
   linking process, the installation sets up a script, <tt>allegro-config</tt>, that
   will print out a suitable commandline. You can use this inside backtick
   command substitution, for example:
<textblock>
      gcc myfile.c -o myprogram `allegro-config --static`
<endblock>
   This will enable you to link against the static library.
   
   The `<tt>allegro-config --shared</tt>` option mentioned above will output all the
   options and libraries needed to link dynamically against the shared
   version of the Allegro library. If you use <tt>--libs</tt> instead of <tt>--shared</tt> or
   <tt>--static</tt>, the script will generate the linking arguments according to the
   latest installed library version. You can also run these <tt>allegro-config</tt>
   commands on the commandline to see what exactly they do.

   If you want to build a debug version of your program, assuming that 
   you have installed the debug version of Allegro, use:
<textblock>
      gcc myfile.c -o myprogram `allegro-config --libs debug`
<endblock>
   Terminal newbies, take note that these are ` backticks, not normal '
   quotes!

   There are also other switches for printing out the Allegro version number,
   or to override the install paths. Run <tt>allegro-config</tt> without any
   arguments for a full list of options.

   Don't forget that you need to use the <code>END_OF_MAIN()</code> macro right after
   your <code>main()</code> function!
